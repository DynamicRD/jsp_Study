package co.kh.dev.homepageproject.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import co.kh.dev.common.ConnectionPool;
import co.kh.dev.common.DBUtility;

public class MemberDAO {
	private final String SELECT_SQL = "SELECT * FROM Member";
	private final String SELECT_BY_ID_SQL = "SELECT count(*) as count FROM Member WHERE ID = ?";
	private final String SELECT_LOGIN_CHECK_SQL = "SELECT * FROM Member WHERE ID = ? AND PWD = ?";
	private final String INSERT_SQL = "insert into Member values(?,?,?,?,?,?,?,?,?,?)";
	private final String DELETE_SQL = "DELETE FROM Member WHERE ID = ?";
	private final String UPDATE_SQL = "UPDATE Member SET PWD = ?, EMAIL = ?, NAME = ?, BIRTH = ? WHERE ID = ?";
	private final String SELECT_ZIP_SQL = "select * from zipcode where dong like ?";
	// 전체를 DB에서 출력
	public ArrayList<MemberVO> selectDB() {
		ConnectionPool cp = ConnectionPool.getInstance(); 
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<MemberVO> tmList = new ArrayList<MemberVO>();
		try {
			pstmt = con.prepareStatement(SELECT_SQL);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				String id 		= rs.getString("ID");
				String passwd 	= rs.getString("passwd");
				String name 	= rs.getString("name");
				String memNum1 	= rs.getString("mem_Num1");
				String memNum2 	= rs.getString("mem_Num2");
				String eMail 	= rs.getString("E_MAIL");
				String phone 	= rs.getString("phone");
				String zipcode 	= rs.getString("zipcode");
				String address 	= rs.getString("address");
				String job 		= rs.getString("job");
				MemberVO tmvo = 
						new MemberVO(id, passwd, name, memNum1, memNum2, eMail, phone, zipcode, address, job);
				tmList.add(tmvo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt, rs);
		}
		return tmList;
	}
	
	public boolean selectIdCheck(MemberVO mvo) {
		ConnectionPool cp = ConnectionPool.getInstance(); 
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int count = 0;
		try {
			pstmt = con.prepareStatement(SELECT_BY_ID_SQL);
			pstmt.setString(1, mvo.getId());
			rs = pstmt.executeQuery();
			while (rs.next()) {
				count = rs.getInt("count");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt, rs);
		}
		return (count != 0 ) ? true : false;
	}

	public ArrayList<ZipCodeVO> selectZipCode(ZipCodeVO zvo) {
		ConnectionPool cp = ConnectionPool.getInstance(); 
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<ZipCodeVO> zipList = new ArrayList<ZipCodeVO>();
		try {
			pstmt = con.prepareStatement(SELECT_ZIP_SQL);
			pstmt.setString(1, zvo.getDong() + "%");
			rs = pstmt.executeQuery();
			while(rs.next()){
				String zipcode = rs.getString("zipcode");
				String sido= rs.getString("sido");
				String gugun= rs.getString("gugun");
				String dong= rs.getString("dong");
				String bunji= rs.getString("bunji");
				ZipCodeVO obj = new ZipCodeVO(zipcode, sido, gugun, dong, bunji);
				zipList.add(obj);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt, rs);
		}
		return zipList;
	}

	public Boolean insertDB(MemberVO mvo) {
		ConnectionPool cp = ConnectionPool.getInstance(); 
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		int count = 0;
		try {
			pstmt= con.prepareStatement(INSERT_SQL);
			pstmt.setString(1,mvo.getId());
			 pstmt.setString(2,mvo.getPass());
			 pstmt.setString(3,mvo.getName());
			 pstmt.setString(4,mvo.getPhone1());
			 pstmt.setString(5,mvo.getPhone2());
			 pstmt.setString(6,mvo.getPhone3());
			 pstmt.setString(7,mvo.getEmail());
			 pstmt.setString(8,mvo.getZipcode());
			 pstmt.setString(9,mvo.getAddress1());
			 pstmt.setString(10,mvo.getAddress2());
			 count = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt);
		}
		return (count>0)?true:false;
	}
}