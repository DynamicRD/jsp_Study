package co.kh.dev.boardone.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import co.kh.dev.common.ConnectionPool;
import co.kh.dev.common.DBUtility;

//역전주입 : 스프링부트가 자동으로 생성해서 객체를 주입한다.
//@Repository("bdao")
public class BoardDAO {
	// 싱글톤 1번
	private static BoardDAO instance;

	// 싱글톤 2번
	private BoardDAO() {
	}

	// 싱글톤 3번
	public static BoardDAO getInstance() {
		if (instance == null) {
			synchronized (BoardDAO.class) {
				instance = new BoardDAO();
			}
		}

		return instance;
	}

	private final String SELECT_SQL = "select * from board order by num desc";
	private final String SELECT_COUNT_SQL = "SELECT COUNT(*) AS COUNT FROM Board";
	private final String SELECT_MAX_NUM_SQL = "select max(num) from board";
	private final String SELECT_ONE_SQL = "select * from board where num = ?";
	private final String SELECT_PASS_CHECK_SQL = "SELECT COUNT(*) AS COUNT from board where num = ? and pass = ?";
	private final String SELECT_BY_ID_SQL = "SELECT count(*) as count FROM Board WHERE ID = ?";
	private final String SELECT_LOGIN_SQL = "SELECT PASS FROM Board WHERE ID = ?";
	private final String INSERT_SQL = "insert into board(num, writer, email, subject, pass, regdate, ref, step, depth, content, ip) values(board_seq.nextval,?,?,?,?,?,?,?,?,?,?)";
	private final String DELETE_SQL = "DELETE FROM Board WHERE ID = ?";
	private final String UPDATE_SQL = "update board set writer=?,email=?,subject=?,content=? where num=?";
	private final String UPDATE_STEP_SQL = "update board set step=step+1 where ref= ? and step> ?";
	private final String UPDATE_READCOUNT_SQL = "update board set readcount=readcount+1 where num = ?";
	private final String SELECT_ZIP_SQL = "select * from zipcode where dong like ?";

	public Boolean insertDB(BoardVO bvo) {
		ConnectionPool cp = ConnectionPool.getInstance();
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;

		// 현재 보드속에 가장 최고값 +1,없으면 1
		ResultSet rs = null;
		int number = 0;
		int step = 0;
		int depth = 0;
		int ref = 1;
		try {
			pstmt = con.prepareStatement(SELECT_MAX_NUM_SQL);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				number = rs.getInt("NUM") + 1;
			} else {
				number = 1;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		// getNum이 0이면 새글, 0이 아니면 답변글이다
		try {
			if (bvo.getNum() != 0) {// 답변글일경우
				pstmt = con.prepareStatement(UPDATE_STEP_SQL);
				pstmt.setInt(1, bvo.getRef());
				pstmt.setInt(2, bvo.getStep());
				pstmt.executeUpdate();
				ref = bvo.getRef();
				step = bvo.getStep() + 1;
				depth = bvo.getDepth() + 1;
			} else {// 새 글일 경우
				ref = number; // 가장 최고의값 + 1
				step = 0;
				depth = 0;
			} // 쿼리를 작성
		} catch (SQLException e) {
			e.printStackTrace();
		}

		int count = 0;
		try {
			pstmt = con.prepareStatement(INSERT_SQL);
			pstmt.setString(1, bvo.getWriter());
			pstmt.setString(2, bvo.getEmail());
			pstmt.setString(3, bvo.getSubject());
			pstmt.setString(4, bvo.getPass());
			pstmt.setTimestamp(5, bvo.getRegdate());
			pstmt.setInt(6, ref);
			pstmt.setInt(7, step);
			pstmt.setInt(8, depth);
			pstmt.setString(9, bvo.getContent());
			pstmt.setString(10, bvo.getIp());
			count = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt);
		}
		return (count > 0) ? true : false;
	}

	public int selectCountDB() {
		ConnectionPool cp = ConnectionPool.getInstance();
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int count = 0;
		try {
			pstmt = con.prepareStatement(SELECT_COUNT_SQL);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				count = rs.getInt("COUNT");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt, rs);
		}
		return count;
	}

	public ArrayList<BoardVO> selectDB() {
		ConnectionPool cp = ConnectionPool.getInstance();
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<BoardVO> boardList = new ArrayList<BoardVO>();
		try {
			pstmt = con.prepareStatement(SELECT_SQL);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				int num = rs.getInt("num");
				String writer = rs.getString("writer");
				String email = rs.getString("email");
				String subject = rs.getString("subject");
				String pass = rs.getString("pass");
				Timestamp regdate = rs.getTimestamp("regdate");
				int readcount = rs.getInt("readcount");
				int ref = rs.getInt("ref");
				int step = rs.getInt("step");
				int depth = rs.getInt("depth");
				String content = rs.getString("content");
				String ip = rs.getString("ip");

				BoardVO bvo = new BoardVO(num, writer, email, subject, pass, readcount, ref, step, depth, regdate,
						content, ip);
				boardList.add(bvo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt, rs);
		}
		return boardList;
	}

	public BoardVO selectBoardDB(BoardVO vo) {
		ConnectionPool cp = ConnectionPool.getInstance();
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardVO bvo = null;
		int count = 0;
		try {
			// 조회수 증가
			pstmt = con.prepareStatement(UPDATE_READCOUNT_SQL);
			pstmt.setInt(1, vo.getNum());
			count = pstmt.executeUpdate();

			// 상세내용 조회
			pstmt = con.prepareStatement(SELECT_ONE_SQL);
			pstmt.setInt(1, vo.getNum());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				int num = rs.getInt("num");
				String writer = rs.getString("writer");
				String email = rs.getString("email");
				String subject = rs.getString("subject");
				String pass = rs.getString("pass");
				Timestamp regdate = rs.getTimestamp("regdate");
				int readcount = rs.getInt("readcount");
				int ref = rs.getInt("ref");
				int step = rs.getInt("step");
				int depth = rs.getInt("depth");
				String content = rs.getString("content");
				String ip = rs.getString("ip");
				bvo = new BoardVO(num, writer, email, subject, pass, readcount, ref, step, depth, regdate, content, ip);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt, rs);
		}
		return bvo;

	}

	public BoardVO selectBoardOneDB(BoardVO vo) {
		ConnectionPool cp = ConnectionPool.getInstance();
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardVO bvo = null;
		int count = 0;
		try {
			// 조회수 증가
			pstmt = con.prepareStatement(UPDATE_READCOUNT_SQL);
			pstmt.setInt(1, vo.getNum());
			count = pstmt.executeUpdate();

			// 상세내용 조회
			pstmt = con.prepareStatement(SELECT_ONE_SQL);
			pstmt.setInt(1, vo.getNum());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				int num = rs.getInt("num");
				String writer = rs.getString("writer");
				String email = rs.getString("email");
				String subject = rs.getString("subject");
				String pass = rs.getString("pass");
				Timestamp regdate = rs.getTimestamp("regdate");
				int readcount = rs.getInt("readcount");
				int ref = rs.getInt("ref");
				int step = rs.getInt("step");
				int depth = rs.getInt("depth");
				String content = rs.getString("content");
				String ip = rs.getString("ip");
				bvo = new BoardVO(num, writer, email, subject, pass, readcount, ref, step, depth, regdate, content, ip);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cp.dbClose(con, pstmt, rs);
		}
		return bvo;

	}

	public int updateDB(BoardVO bvo) {
		//1: 성공, 2. 패스워드문제, 3.수정문제
		ConnectionPool cp = ConnectionPool.getInstance();
		Connection con = cp.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int passCheckCount = 0;
		int count = 0;
		int returnValue = 1;
		// 패스워드가 맞는지 점검 필요
		try {
			pstmt = con.prepareStatement(SELECT_PASS_CHECK_SQL);
			pstmt.setInt(1, bvo.getNum());
			pstmt.setString(2, bvo.getPass());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				passCheckCount = rs.getInt(count);
				if(passCheckCount == 0) {
					returnValue = 2;
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		if (passCheckCount != 0) {
			try {
				pstmt = con.prepareStatement(UPDATE_SQL);
				pstmt.setString(1, bvo.getWriter());
				pstmt.setString(2, bvo.getEmail());
				pstmt.setString(3, bvo.getSubject());
				pstmt.setString(4, bvo.getContent());
				pstmt.setInt(5, bvo.getNum());
				count = pstmt.executeUpdate();
				if(count == 0) returnValue = 3;
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				cp.dbClose(con, pstmt);
			}
		}else {
			returnValue = 2;
		}
			return returnValue;
	}

	// 전체를 DB에서 출력
	/*
	 * public ArrayList<BoardVO> selectDB() { ConnectionPool cp =
	 * ConnectionPool.getInstance(); Connection con = cp.dbCon(); PreparedStatement
	 * pstmt = null; ResultSet rs = null; ArrayList<BoardVO> tmList = new
	 * ArrayList<BoardVO>(); try { pstmt = con.prepareStatement(SELECT_SQL); rs =
	 * pstmt.executeQuery(); while (rs.next()) { String id = rs.getString("ID");
	 * String passwd = rs.getString("passwd"); String name = rs.getString("name");
	 * String memNum1 = rs.getString("mem_Num1"); String memNum2 =
	 * rs.getString("mem_Num2"); String eMail = rs.getString("E_MAIL"); String phone
	 * = rs.getString("phone"); String zipcode = rs.getString("zipcode"); String
	 * address = rs.getString("address"); String job = rs.getString("job"); BoardVO
	 * tmvo = new BoardVO(id, passwd, name, memNum1, memNum2, eMail, phone, zipcode,
	 * address, job); tmList.add(tmvo); } } catch (SQLException e) {
	 * e.printStackTrace(); } finally { cp.dbClose(con, pstmt, rs); } return tmList;
	 * }
	 * 
	 * public BoardVO selectOneDB(BoardVO bvo) { ConnectionPool cp =
	 * ConnectionPool.getInstance(); Connection con = cp.dbCon(); PreparedStatement
	 * pstmt = null; ResultSet rs = null; BoardVO resultVO =null; try { pstmt =
	 * con.prepareStatement(SELECT_ONE_SQL); pstmt.setString(1, bvo.getId()); rs =
	 * pstmt.executeQuery(); while (rs.next()) { String id = rs.getString("ID");
	 * String pass = rs.getString("pass"); String name = rs.getString("name");
	 * String phone1 = rs.getString("phone1"); String phone2 =
	 * rs.getString("phone2"); String phone3 = rs.getString("phone3"); String eMail
	 * = rs.getString("email"); String zipcode = rs.getString("zipcode"); String
	 * address1 = rs.getString("address1"); String address2 =
	 * rs.getString("address2"); resultVO = new BoardVO(id, pass, name, phone1,
	 * phone2, phone3, eMail, zipcode, address1, address2); } }catch (SQLException
	 * e) { e.printStackTrace(); } finally { cp.dbClose(con, pstmt, rs); } return
	 * resultVO; }
	 * 
	 * 
	 * public boolean selectIdCheck(BoardVO bvo) { ConnectionPool cp =
	 * ConnectionPool.getInstance(); Connection con = cp.dbCon(); PreparedStatement
	 * pstmt = null; ResultSet rs = null; int count = 0; try { pstmt =
	 * con.prepareStatement(SELECT_BY_ID_SQL); pstmt.setString(1, bvo.getId()); rs =
	 * pstmt.executeQuery(); while (rs.next()) { count = rs.getInt("count"); } }
	 * catch (SQLException e) { e.printStackTrace(); } finally { cp.dbClose(con,
	 * pstmt, rs); } return (count != 0 ) ? true : false; }
	 * 
	 * public ArrayList<ZipCodeVO> selectZipCode(ZipCodeVO zvo) { ConnectionPool cp
	 * = ConnectionPool.getInstance(); Connection con = cp.dbCon();
	 * PreparedStatement pstmt = null; ResultSet rs = null; ArrayList<ZipCodeVO>
	 * zipList = new ArrayList<ZipCodeVO>(); try { pstmt =
	 * con.prepareStatement(SELECT_ZIP_SQL); pstmt.setString(1, zvo.getDong() +
	 * "%"); rs = pstmt.executeQuery(); while(rs.next()){ String zipcode =
	 * rs.getString("zipcode"); String sido= rs.getString("sido"); String gugun=
	 * rs.getString("gugun"); String dong= rs.getString("dong"); String bunji=
	 * rs.getString("bunji"); ZipCodeVO obj = new ZipCodeVO(zipcode, sido, gugun,
	 * dong, bunji); zipList.add(obj); } } catch (SQLException e) {
	 * e.printStackTrace(); } finally { cp.dbClose(con, pstmt, rs); } return
	 * zipList; }
	 * 
	 * 
	 * 
	 * public Boolean updateDB(BoardVO bvo) { ConnectionPool cp =
	 * ConnectionPool.getInstance(); Connection con = cp.dbCon(); PreparedStatement
	 * pstmt = null; int count = 0; try { pstmt= con.prepareStatement(UPDATE_SQL);
	 * pstmt.setString(1,bvo.getPass()); pstmt.setString(2,bvo.getPhone1());
	 * pstmt.setString(3,bvo.getPhone2()); pstmt.setString(4,bvo.getPhone3());
	 * pstmt.setString(5,bvo.getEmail()); pstmt.setString(6,bvo.getZipcode());
	 * pstmt.setString(7,bvo.getAddress1()); pstmt.setString(8,bvo.getAddress2());
	 * pstmt.setString(9,bvo.getId()); count = pstmt.executeUpdate(); } catch
	 * (SQLException e) { e.printStackTrace(); } finally { cp.dbClose(con, pstmt); }
	 * return (count>0)?true:false; }
	 * 
	 * public Boolean deleteDB(BoardVO bvo) { ConnectionPool cp =
	 * ConnectionPool.getInstance(); Connection con = cp.dbCon(); PreparedStatement
	 * pstmt = null; int count = 0; try { pstmt= con.prepareStatement(DELETE_SQL);
	 * pstmt.setString(1,bvo.getId()); count = pstmt.executeUpdate(); } catch
	 * (SQLException e) { e.printStackTrace(); } finally { cp.dbClose(con, pstmt); }
	 * return (count>0)?true:false; }
	 * 
	 * public int selectLoginCheck(BoardVO bvo) { ConnectionPool cp =
	 * ConnectionPool.getInstance(); Connection con = cp.dbCon(); PreparedStatement
	 * pstmt = null; ResultSet rs = null; String pass = null; int check = -1; try {
	 * pstmt = con.prepareStatement(SELECT_LOGIN_SQL); pstmt.setString(1,
	 * bvo.getId()); rs = pstmt.executeQuery(); if (rs.next()) { pass =
	 * rs.getString("PASS"); check = (pass.equals(bvo.getPass()) == true) ? 1:0; } }
	 * catch (SQLException e) { e.printStackTrace(); } finally { cp.dbClose(con,
	 * pstmt, rs); } return check; }
	 */

}